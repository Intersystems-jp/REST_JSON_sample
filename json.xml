<?xml version="1.0" encoding="UTF-8"?>
<Export generator="IRIS" version="26" zv="IRIS for Windows (x86-64) 2020.1 (Build 199U)" ts="2020-05-01 13:50:56">
<Class name="REST.Person">
<Super>%CSP.REST</Super>
<TimeChanged>65500,49682.29119</TimeChanged>
<TimeCreated>63623,39757.186699</TimeCreated>

<Parameter name="HandleCorsRequest">
<Default>1</Default>
</Parameter>

<XData name="UrlMap">
<Data><![CDATA[
<Routes>
<Route Url="/persons/:keyword" Method="GET" Call="getperson"/>
<Route Url="/persons2/" Method="POST" Call="getperson2"/>
</Routes>
]]></Data>
</XData>

<Method name="getperson">
<ClassMethod>1</ClassMethod>
<FormalSpec>keywords:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  	Set person=##class(Sample.Person).%OpenId(keywords) //Open a Person object
	do person.%JSONExport()
  	Quit 1
]]></Implementation>
</Method>

<Method name="getperson2">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s keywords=$get(%request.Data("keyword",1))
 	s keywords = "%"_keywords_"%"
	&SQL(SELECT TOP 1 JSON_OBJECT('id':id,'name':name,'age':age) INTO :jsondata FROM Sample.Person WHERE Name LIKE :keywords)
	w jsondata
	
  	Quit 1
]]></Implementation>
</Method>
</Class>


<Class name="Sample.Address">
<Description>
This is a sample embeddable class representing an address.</Description>
<StorageStrategy>AddressState</StorageStrategy>
<Super>%SerialObject,%Populate,%XML.Adaptor,%JSON.Adaptor</Super>
<TimeChanged>65500,40987.244903</TimeChanged>
<TimeCreated>59269,38836.251</TimeCreated>

<Property name="Street">
<Description>
The street address.</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="80"/>
<Parameter name="POPSPEC" value="Street()"/>
</Property>

<Property name="City">
<Description>
The city name.</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="80"/>
<Parameter name="POPSPEC" value="City()"/>
</Property>

<Property name="State">
<Description>
The 2-letter state abbreviation.</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="2"/>
<Parameter name="POPSPEC" value="USState()"/>
</Property>

<Property name="Zip">
<Description>
The 5-digit U.S. Zone Improvement Plan (ZIP) code.</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="5"/>
<Parameter name="POPSPEC" value="USZip()"/>
</Property>

<Storage name="AddressState">
<Type>%Storage.Serial</Type>
<State>AddressState</State>
<StreamLocation>^Sample.AddressS</StreamLocation>
<Data name="AddressState">
<Value name="1">
<Value>Street</Value>
</Value>
<Value name="2">
<Value>City</Value>
</Value>
<Value name="3">
<Value>State</Value>
</Value>
<Value name="4">
<Value>Zip</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Sample.Person">
<Description><![CDATA[
This sample persistent class represents a person.
<p>Maintenance note: This class is used by some of the bindings samples.]]></Description>
<Super>%Persistent,%Populate,%XML.Adaptor,%JSON.Adaptor</Super>
<TimeChanged>65499,52317.413912</TimeChanged>
<TimeCreated>59269,38836.623</TimeCreated>

<Parameter name="EXTENTQUERYSPEC">
<Default>Name,SSN,Home.City,Home.State</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// define indices for this class

]]></Content>
</UDLText>

<Index name="SSNKey">
<Description><![CDATA[
Define a unique index for <property>SSN</property>.]]></Description>
<Type>index</Type>
<Properties>SSN</Properties>
<Unique>1</Unique>
</Index>

<Index name="NameIDX">
<Description><![CDATA[
Define an index for <property>Name</property>.]]></Description>
<Data>Name</Data>
<Properties>Name</Properties>
</Index>

<Index name="ZipCode">
<Description><![CDATA[
Define an index for embedded object property <b>ZipCode</b>.]]></Description>
<Type>bitmap</Type>
<Properties>Home.Zip</Properties>
</Index>

<UDLText name="T">
<Content><![CDATA[
// define properties for this class

]]></Content>
</UDLText>

<Property name="Name">
<Description>
Person's name.</Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="POPSPEC" value="Name()"/>
</Property>

<Property name="SSN">
<Description>
Person's Social Security number. This is validated using pattern match.</Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="PATTERN" value="3N1&quot;-&quot;2N1&quot;-&quot;4N"/>
</Property>

<Property name="DOB">
<Description>
Person's Date of Birth.</Description>
<Type>%Date</Type>
<Parameter name="POPSPEC" value="Date()"/>
</Property>

<Property name="Home">
<Description>
Person's home address. This uses an embedded object.</Description>
<Type>Address</Type>
</Property>

<Property name="Office">
<Description>
Person's office address. This uses an embedded object.</Description>
<Type>Address</Type>
</Property>

<Property name="Spouse">
<Description>
Person's spouse. This is a reference to another persistent object.</Description>
<Type>Person</Type>
</Property>

<Property name="FavoriteColors">
<Description>
A collection of strings representing the person's favorite colors.</Description>
<Type>%String</Type>
<Collection>list</Collection>
<Parameter name="JAVATYPE" value="java.util.List"/>
<Parameter name="POPSPEC" value="ValueList(&quot;,Red,Orange,Yellow,Green,Blue,Purple,Black,White&quot;):2"/>
</Property>

<Property name="Age">
<Description><![CDATA[
Person's age.<br>
This is a calculated field whose value is derived from <property>DOB</property>.]]></Description>
<Type>%Integer</Type>
<Calculated>1</Calculated>
<SqlComputeCode> Set {Age}=##class(Sample.Person).CurrentAge({DOB})
</SqlComputeCode>
<SqlComputed>1</SqlComputed>
<SqlComputeOnChange>DOB</SqlComputeOnChange>
</Property>

<Method name="OpenByQuery">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&output:%ObjectHandle,where:%String,parameters...:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ret=$$$OK
	set output=$$$NULLOREF
	try {
		set stmt=##class(%SQL.Statement).%New()
		//set status=stmt.%Prepare("select id from {%%TABLENAME} where "_where)
		set status=stmt.%Prepare("select id from "_..getSQLTableName()_" where "_where)
		s ^kake="select id from "_..getSQLTableName()_" where "_where
		if $$$ISERR(status) Set ret=status Quit
		set rs=stmt.%Execute(parameters...)
		set cnt=0
		while rs.%Next() {
			set id=rs.%GetData(1)
			Set cnt=cnt+1
		}
		If cnt=0 Set ret=$$$ERROR(5001,"no such object") Quit
		If cnt>1 Set ret=$$$ERROR(5001,"too many objects") Quit
		Set output=..%OpenId(id)
		
	}catch ex {
		Set ret=ex.AsStatus()
	}
	Quit ret
]]></Implementation>
</Method>

<Method name="getSQLTableName">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set cls=##class(%Dictionary.CompiledClass).%OpenId(..%ClassName(1))
	Quit cls.SqlSchemaName_"."_cls.SqlTableName
]]></Implementation>
</Method>

<Method name="CurrentAge">
<Description><![CDATA[
This class method calculates a current age given a date of birth <var>date</var>.]]></Description>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>date:%Date=""</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[$Select(date="":"",1:($ZD($H,8)-$ZD(date,8)\10000))
]]></Implementation>
</Method>

<Method name="PrintPerson">
<Description><![CDATA[
Prints the property <property>Name</property> to the console.]]></Description>
<Implementation><![CDATA[
	Write !, "Name: ", ..Name
	Quit
]]></Implementation>
</Method>

<Method name="Addition">
<Description><![CDATA[
A simple, sample method: add two numbers (<var>x</var> and <var>y</var>) 
and return the result.]]></Description>
<FormalSpec>x:%Integer=1,y:%Integer=1</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	Quit x + y // comment
]]></Implementation>
</Method>

<Method name="NinetyNine">
<Description>
A simple, sample expression method: returns the value 99.</Description>
<CodeMode>expression</CodeMode>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[99
]]></Implementation>
</Method>

<Method name="PrintPersons">
<Description><![CDATA[
Invoke the <method>PrintPerson</method> on all <class>Person</class> objects 
within the database.]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	// use the extent result set to find all person
	Set extent = ##class(%ResultSet).%New("Sample.Person:Extent")
	Do extent.Execute()
	
	While (extent.Next()) {
		Set person = ..%OpenId(extent.GetData(1))
		Do person.PrintPerson()
	}
	
	Quit
]]></Implementation>
</Method>

<Method name="PrintPersonsSQL">
<Description>
Prints out data on all persons within the database using SQL to 
iterate over all the person data.</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	// use dynamic SQL result set to find person data
	Set query = ##class(%ResultSet).%New("%DynamicQuery:SQL")
	Do query.Prepare("SELECT ID, Name, SSN FROM Sample.Person ORDER BY Name")
	Do query.Execute()
	
	While (query.Next()) {
		Write !,"Name: ", query.Get("Name"), ?30, query.Get("SSN")
	}
	
	Quit
]]></Implementation>
</Method>

<Method name="StoredProcTest">
<Description><![CDATA[
This is a sample of how to define an SQL stored procedure using a 
class method. This method can be called as a stored procedure via 
ODBC or JDBC.<br>
In this case this method returns the concatenation of a string value.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[name:%String,&response:%String]]></FormalSpec>
<ReturnType>%Integer</ReturnType>
<SqlName>Stored_Procedure_Test</SqlName>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
	// Set response to the concatenation of name.
	Set response = name _ "||" _ name
	//Set response = name
	QUIT 29
]]></Implementation>
</Method>

<Method name="UpdateProcTest">
<Description><![CDATA[
This is a sample of how to define an SQL stored procedure using a 
class method. This method can be called as a stored procedure via 
ODBC or JDBC.<br>
This method performs an SQL update operation on the database 
using embedded SQL. The update modifies the embedded properties 
<var>Home.City</var> and <var>Home.State</var> for all rows whose 
<var>Home.Zip</var> is equal to <var>zip</var>.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>zip:%String,city:%String,state:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
	New %ROWCOUNT,%ROWID
	
	&sql(UPDATE Sample.Person 
	SET Home_City = :city, Home_State = :state 
	WHERE Home_Zip = :zip)
	
	// Return context information to client via %SQLProcContext object
	If ($g(%sqlcontext)'=$$$NULLOREF) { 
		Set %sqlcontext.SQLCode = SQLCODE
		Set %sqlcontext.RowCount = %ROWCOUNT
	}
	QUIT 1
]]></Implementation>
</Method>

<Query name="ByName">
<Description><![CDATA[
A sample class query that defines a result set that returns Person data 
ordered by <property>Name</property>.<br>
This query can be used within another Cach&eacute; method (using the
<class>%ResultSet</class> class), from Java, or from ActiveX.<br>
This query is also accessible from ODBC and/or JDBC as the SQL stored procedure 
<b>SP_Sample_By_Name</b>.]]></Description>
<Type>%SQLQuery</Type>
<FormalSpec>name:%String=""</FormalSpec>
<SqlName>SP_Sample_By_Name</SqlName>
<SqlProc>1</SqlProc>
<SqlQuery>SELECT ID, Name, DOB, SSN
FROM Sample.Person
WHERE (Name %STARTSWITH :name)
ORDER BY Name</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="SELECTMODE" value="RUNTIME"/>
</Query>

<Method name="testproc1">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
 set ret=$zdt($H)
 Hang 30
 Quit ret_" - "_$zdt($H)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Sample.PersonD</DataLocation>
<DefaultData>PersonDefaultData</DefaultData>
<IdLocation>^Sample.PersonD</IdLocation>
<IndexLocation>^Sample.PersonI</IndexLocation>
<StreamLocation>^Sample.PersonS</StreamLocation>
<ExtentSize>400</ExtentSize>
<Data name="PersonDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>SSN</Value>
</Value>
<Value name="4">
<Value>DOB</Value>
</Value>
<Value name="5">
<Value>Home</Value>
</Value>
<Value name="6">
<Value>Office</Value>
</Value>
<Value name="7">
<Value>Spouse</Value>
</Value>
<Value name="8">
<Value>FavoriteColors</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>2.73</AverageFieldSize>
</Property>
<Property name="Age">
<Selectivity>1.0417%</Selectivity>
<AverageFieldSize>1.89</AverageFieldSize>
</Property>
<Property name="DOB">
<Selectivity>0.2525%</Selectivity>
<AverageFieldSize>5</AverageFieldSize>
</Property>
<Property name="FavoriteColors">
<Selectivity>1.0231%</Selectivity>
<OutlierSelectivity>.335:</OutlierSelectivity>
<AverageFieldSize>7.05</AverageFieldSize>
</Property>
<Property name="Home">
<Selectivity>0.2500%,State:2.0000%,Street:0.2500%,City:3.8462%,Zip:0.2506%</Selectivity>
<AverageFieldSize>36.25,State:2,Street:16.61,City:7.25,Zip:5</AverageFieldSize>
</Property>
<Property name="Name">
<Selectivity>0.2500%</Selectivity>
<AverageFieldSize>16.15</AverageFieldSize>
</Property>
<Property name="Office">
<Selectivity>0.2500%,City:3.8462%,State:2.0000%,Street:0.2500%,Zip:0.2500%</Selectivity>
<AverageFieldSize>36.18,City:7.38,State:2,Street:16.42,Zip:5</AverageFieldSize>
</Property>
<Property name="SSN">
<Selectivity>1</Selectivity>
<AverageFieldSize>11</AverageFieldSize>
</Property>
<Property name="Spouse">
<Selectivity>0.5034%</Selectivity>
<OutlierSelectivity>.25:</OutlierSelectivity>
<AverageFieldSize>1.72</AverageFieldSize>
</Property>
<SQLMap name="$Person">
<BlockCount>-4</BlockCount>
</SQLMap>
<SQLMap name="IDKEY">
<BlockCount>-32</BlockCount>
</SQLMap>
<SQLMap name="NameIDX">
<BlockCount>-8</BlockCount>
</SQLMap>
<SQLMap name="SSNKey">
<BlockCount>-8</BlockCount>
</SQLMap>
<SQLMap name="ZipCode">
<BlockCount>-8</BlockCount>
</SQLMap>
</Storage>
</Class>
</Export>
